/**
 * The `nake` tasks
 *
 * USAGE:
 *   npm install nake
 *   nake --list
 *
 * Copyright (C) 2011 Nikolay Nemshilov
 */
var nake = require('nake');
nake.Quiet = true;

nake.task('build', 'Build the script', function() {
  var disc   = require('fs');
  var ugly   = require('uglify-js');
  var source = require('./test/test_helper').Source;

  var module, build;

  for (module in source) {
    build = ugly.parser.parse(source[module]);

    build = ugly.uglify.ast_mangle(build);
    build = ugly.uglify.ast_squeeze(build);
    build = ugly.uglify.gen_code(build);

    // copying the header over
    build = source[module].match(/\/\*[\s\S]+?\*\/\s/m)[0] + build;

    system('mkdir -p build/');

    disc.writeFileSync('build/'+ module +'.js', build);

    system('gzip -c build/'+ module +'.js > build/'+ module +'.js.gz');
  }
});


nake.task('test', 'Run the tests', function() {
  system('vows test/*/*_test.js');
});

nake.namespace('test', function() {
  nake.task('spec', 'Run the tests with spec output', function() {
    system('vows test/*/*_test.js --spec');
  })
});

nake.task('check', 'Checks the source code with JSHint', function() {
  var check  = require('jshint').JSHINT,
      source = require('./test/test_helper').Source,
      report = '', module;

  for (module in source) {
    check(source[module], {
      boss:   true,
      curly:  true,
      expr:   true
    });

    if (check.errors.length) {
      report += "\n\u001B[31m - FAILED: "+ module + ".js\u001B[0m\n"

      check.errors.forEach(function(error) {
        if (error && error.id === '(error)') {
          for (var j=0, pointer=''; j < error.character-1; j++) { pointer += '-'; }

          report += "   \u001B[35m"+ error.reason +"\u001B[0m ";

          if (error.evidence) {
            report += "Line: "+ error.line + ", Char: "+ error.character + "\n";
            report += "   "+ error.evidence + "\n";
            report += "   \u001B[33m"+ pointer + "^\u001B[0m";
          }
        }
      });
      report += "\n\n";

    } else {
      report += "\u001B[32m - OK: "+ module + ".js\u001B[0m\n";
    }
  }

  console.log(report);
});


/**
 * A simple system-call wrapper
 *
 * @param {String} system cmd
 * @return void
 */
function system(cmd) {
  require('child_process').exec(cmd,
    function(error, stdout) {
      if (stdout || error) {
        console.log(stdout || error.message);
      }
    }
  );
}
